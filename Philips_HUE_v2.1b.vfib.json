{"name":"Philips HUE v2.1b","type":"virtual_device","properties":{"deviceIcon":1058,"currentIcon":"1058","log":"","logTemp":"","mainLoop":"","ui.sldBrightness.value":0,"ui.sldHue.value":100,"ui.sldSaturation.value":80,"visible":"true","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"On/Off","name":"hueButton","empty":false,"msg":"-----------------------------------------------------------------------------\n-- Philips HUE Button On/Off 1 lamp\n-----------------------------------------------------------------------------\n--[[\n-----------------------------------------------------------------------------\nVersion 2.1b\nOriginal VD written by CHRISSXCROSS © 2015\nVD modified and upgraded by Sankotronic © 2016\n-----------------------------------------------------------------------------\n--]]\n-- PART OF CODE FOR USERS TO EDIT AND SETUP ---------------------------------\n-- enter HUE bulb ID to control. This ID number you can find from original\n-- application. When you go to Lights view it is then number in front of the\n-- bulb name\nlocal hueLightID = 1;\n-- enter name of the user that you added to the HUE bridge\nlocal hueUser = \"rg4e8w2nutaPWdUKHC2cRBho4HmNhE8kAXHU4oWB\" \n-- enter icon ID's for corresponding status of the lamp and brightness\nlocal iconOff         = 1058;\nlocal icon10          = 1059;\nlocal icon20          = 1060;\nlocal icon30          = 1061;\nlocal icon40          = 1062;\nlocal icon50          = 1063;\nlocal icon60          = 1064;\nlocal icon70          = 1065;\nlocal icon80          = 1066;\nlocal icon90          = 1067;\nlocal icon100         = 1068;\nlocal iconUnreachable = 141;\nlocal iconError       = 142;\n-- END OF CODE PART FOR USERS TO EDIT AND SETUP --------------------------\n\n-- BELLOW CODE NO NEED TO MODIFY BY USER ---------------------------------\n-- except if you know what you're doin' :-P\n\n-- get this virtual device ID\nvDeviceID = fibaro:getSelfId()\n-- get IP address and TCP port for PhilipsHUE bridge\nhueIP = fibaro:get(vDeviceID, \"IPAddress\")\nhuePort = fibaro:get(vDeviceID, \"TCPPort\")\n\n-- function to select the correct icon based on the slider value \n-- NOTE: change the icon IDs if needed \nfunction getIcon(sValue) \n  if(sValue >= 90) then return icon100        -- 90%-99% 11_s_light100.png \n  elseif(sValue >= 80) then return icon90     -- 80%-89% 10_s_light90.png \n  elseif(sValue >= 70) then return icon80     -- 70%-79% 09_s_light80.png \n  elseif(sValue >= 60) then return icon70     -- 60%-69% 08_s_light70.png \n  elseif(sValue >= 50) then return icon60     -- 50%-59% 07_s_light60.png \n  elseif(sValue >= 40) then return icon50     -- 40%-49% 06_s_light50.png \n  elseif(sValue >= 30) then return icon40     -- 30%-39% 05_s_light40.png \n  elseif(sValue >= 20) then return icon30     -- 20%-29% 04_s_light30.png \n  elseif(sValue >= 10) then return icon20     -- 10%-19% 03_s_light20.png \n  elseif(sValue >= 1 ) then return icon10     -- 1%-9%   02_s_light10.png \n  else return iconOff end                     -- 0%      01_s_light0.png \nend \n  \n-- connect to the Hue bridge \nHue = Net.FHttp(hueIP,huePort) \n-- Now do light, get previous settings and send new\n-- HTTP GET to get all the info from the light(s) \nresponse ,status , errorCode = Hue:GET('/api/'..hueUser..'/lights/'..hueLightID);\n-- continue if HTTP status code is 200 \nif (tonumber(status) == 200) then \n  jsonTable = json.decode(response) \n  -- get the on state \n  hueOn = jsonTable.state.on \n  fibaro:debug(\"hueOn = \" .. tostring(hueOn)); \n  -- get the brightness value (0-254) \n  hueBrightness = tonumber(jsonTable.state.bri)\n  fibaro:debug(\"hueBrightness = \"..hueBrightness);\n  -- get the reachable state \n  hueReachable = jsonTable.state.reachable \n  fibaro:debug(\"hueReachable = \" .. tostring(hueReachable)); \n  -- if light is reachable then check if it is ON or OFF to toggle it\n  if (hueReachable == true) then \n    if (hueOn == false) then\n      -- If light was off then turn it on and check brightness\n      hueOn = true;\n      -- devide the hueBrightness value by 2.54 and round it UPWARDS \n      -- to get the hueSlider value (0-100)\n      if hueBrightness <= 2 then hueBrightness = 254 end\n      briSlider = math.ceil(hueBrightness / 2.54); \n    else\n      -- If light was ON then turn it OFF\n      hueOn = false;\n      -- Set brightness slider to 0 since iPad app does not show picture of light status\n      briSlider = 0; \n    end\n    -- HTTP PUT to set the new values \n    response, status, errorCode = Hue:PUT('/api/'..hueUser..'/lights/'..hueLightID..'/state', '{\"on\":'..tostring(hueOn)..',\"bri\":'..hueBrightness..'}');\n    -- show brightness and state info on the bottom bar of the Virtual Device \n    fibaro:log(\"brightness: \"..hueBrightness..\" | on: \"..tostring(hueOn)); \n    -- set the actual slider value to the last light\n    fibaro:call(vDeviceID, \"setProperty\", \"ui.sldBrightness.value\", briSlider); \n    -- change the icon of the Virtual Device based on the hueSlider value \n    fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", getIcon(briSlider));\n  else \n    fibaro:log(\"Hue: Light not reachable\"); \n    -- set slider value to 0 \n    fibaro:call(vDeviceID, \"setProperty\", \"ui.sldBrightness.value\", 0); \n    -- change the icon to unreachable \n    fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", iconUnreachable);\n  end\nelse\n  fibaro:log(\"Hue: Bridge not reachable\");\n  fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", iconError);\nend  \n","buttonIcon":1058,"favourite":false,"main":true}]},{"type":"slider","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"Brightness","name":"sldBrightness","msg":"-----------------------------------------------------------------------------\n-- Philips HUE Brightness slide 1 lamp\n-----------------------------------------------------------------------------\n--[[\n-----------------------------------------------------------------------------\nVersion 2.1b\nOriginal VD written by CHRISSXCROSS © 2015\nVD modified and upgraded by Sankotronic © 2016\n-----------------------------------------------------------------------------\n--]]\n-- PART OF CODE FOR USERS TO EDIT AND SETUP ---------------------------------\n-- enter HUE bulb ID to control. This ID number you can find from original\n-- application. When you go to Lights view it is then number in front of the\n-- bulb name\nlocal hueLightID = 1;\n-- enter name of the user that you added to the HUE bridge\nlocal hueUser = \"rg4e8w2nutaPWdUKHC2cRBho4HmNhE8kAXHU4oWB\" \n-- enter icon ID's for corresponding status of the lamp and brightness\nlocal iconOff         = 1058;\nlocal icon10          = 1059;\nlocal icon20          = 1060;\nlocal icon30          = 1061;\nlocal icon40          = 1062;\nlocal icon50          = 1063;\nlocal icon60          = 1064;\nlocal icon70          = 1065;\nlocal icon80          = 1066;\nlocal icon90          = 1067;\nlocal icon100         = 1068;\nlocal iconUnreachable = 141;\nlocal iconError       = 142;\n-- END OF CODE PART FOR USERS TO EDIT AND SETUP --------------------------\n\n-- BELLOW CODE NO NEED TO MODIFY BY USER ---------------------------------\n-- except if you know what you're doin' :-P\n\n-- get this virtual device ID\nvDeviceID = fibaro:getSelfId()\n-- get IP address and TCP port for PhilipsHUE bridge\nhueIP = fibaro:get(vDeviceID, \"IPAddress\")\nhuePort = fibaro:get(vDeviceID, \"TCPPort\")\n\n-- function to select the correct icon based on the slider value \n-- NOTE: change the icon IDs if needed \nfunction getIcon(sValue) \n  if(sValue >= 90) then return icon100        -- 90%-99% 11_s_light100.png \n  elseif(sValue >= 80) then return icon90     -- 80%-89% 10_s_light90.png \n  elseif(sValue >= 70) then return icon80     -- 70%-79% 09_s_light80.png \n  elseif(sValue >= 60) then return icon70     -- 60%-69% 08_s_light70.png \n  elseif(sValue >= 50) then return icon60     -- 50%-59% 07_s_light60.png \n  elseif(sValue >= 40) then return icon50     -- 40%-49% 06_s_light50.png \n  elseif(sValue >= 30) then return icon40     -- 30%-39% 05_s_light40.png \n  elseif(sValue >= 20) then return icon30     -- 20%-29% 04_s_light30.png \n  elseif(sValue >= 10) then return icon20     -- 10%-19% 03_s_light20.png \n  elseif(sValue >= 1 ) then return icon10     -- 1%-9%   02_s_light10.png \n  else return iconOff end                     -- 0%      01_s_light0.png \nend \n  \n-- define the new values for hueBrightness and hueOn \nif (_sliderValue_ == 0) then \n  hueBrightness = _sliderValue_ \n  hueOn = false \nelse \n  -- multiply the slider value with 2.55 and round it DOWNWARDS \n  -- to get the hueBrightness value (0-254) \n  hueBrightness = math.floor(_sliderValue_ * 2.54) \n  hueOn = true \nend \n  \n-- connect to the Hue bridge \nHue = Net.FHttp(hueIP,huePort) \n-- HTTP PUT to set the new values \nresponse, status, errorCode = Hue:PUT('/api/'..hueUser..'/lights/'..hueLightID..'/state', '{\"on\":'..tostring(hueOn)..',\"bri\":'..hueBrightness..'}')\n-- continue if HTTP status code is 200 \nif (tonumber(status) == 200) then \n  -- change the icon based on the new slider value \n  fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", getIcon(_sliderValue_)) \nelse\n  fibaro:log(\"Hue: Bridge not reachable\");\n  fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", iconError);\nend\n","buttonIcon":1060,"value":0,"favourite":false,"main":true}]},{"type":"slider","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"Hue (color)","name":"sldHue","msg":"-----------------------------------------------------------------------------\n-- Philips HUE Color (hue) slide 1 lamp\n-----------------------------------------------------------------------------\n--[[\n-----------------------------------------------------------------------------\nVersion 2.1b\nOriginal VD written by CHRISSXCROSS © 2015\nVD modified and upgraded by Sankotronic © 2016\n-----------------------------------------------------------------------------\n--]]\n-- PART OF CODE FOR USERS TO EDIT AND SETUP ---------------------------------\n-- enter HUE bulb ID to control. This ID number you can find from original\n-- application. When you go to Lights view it is then number in front of the\n-- bulb name\nlocal hueLightID = 1;\n-- enter name of the user that you added to the HUE bridge\nlocal hueUser = \"rg4e8w2nutaPWdUKHC2cRBho4HmNhE8kAXHU4oWB\" \n-- enter icon ID's for corresponding status of the lamp and brightness\nlocal iconOff         = 1058;\nlocal icon10          = 1059;\nlocal icon20          = 1060;\nlocal icon30          = 1061;\nlocal icon40          = 1062;\nlocal icon50          = 1063;\nlocal icon60          = 1064;\nlocal icon70          = 1065;\nlocal icon80          = 1066;\nlocal icon90          = 1067;\nlocal icon100         = 1068;\nlocal iconUnreachable = 141;\nlocal iconError       = 142;\n-- END OF CODE PART FOR USERS TO EDIT AND SETUP --------------------------\n\n-- BELLOW CODE NO NEED TO MODIFY BY USER ---------------------------------\n-- except if you know what you're doin' :-P\n\n-- get this virtual device ID\nvDeviceID = fibaro:getSelfId()\n-- get IP address and TCP port for PhilipsHUE bridge\nhueIP = fibaro:get(vDeviceID, \"IPAddress\")\nhuePort = fibaro:get(vDeviceID, \"TCPPort\")\n\n-- function to select the correct icon based on the slider value \nfunction getIcon(sValue) \n  if(sValue >= 90) then return icon100        -- 90%-99% 11_s_light100.png \n  elseif(sValue >= 80) then return icon90     -- 80%-89% 10_s_light90.png \n  elseif(sValue >= 70) then return icon80     -- 70%-79% 09_s_light80.png \n  elseif(sValue >= 60) then return icon70     -- 60%-69% 08_s_light70.png \n  elseif(sValue >= 50) then return icon60     -- 50%-59% 07_s_light60.png \n  elseif(sValue >= 40) then return icon50     -- 40%-49% 06_s_light50.png \n  elseif(sValue >= 30) then return icon40     -- 30%-39% 05_s_light40.png \n  elseif(sValue >= 20) then return icon30     -- 20%-29% 04_s_light30.png \n  elseif(sValue >= 10) then return icon20     -- 10%-19% 03_s_light20.png \n  elseif(sValue >= 1 ) then return icon10     -- 1%-9%   02_s_light10.png \n  else return iconOff end                     -- 0%      01_s_light0.png \nend \n  \n-- define new value for Color\nvHue = math.floor(_sliderValue_ * 655.35)\n-- connect to the Hue bridge \nHue = Net.FHttp(hueIP,huePort)\n-- now set color for all lights\nHue:PUT('/api/'..hueUser..'/lights/'..hueLightID..'/state', '{\"hue\":'.. vHue .. '}')\n-- change the icon based on the new slider value \nfibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", getIcon(tonumber(fibaro:getValue(vDeviceID, \"ui.sldBrightness.value\")))) \n","buttonIcon":1058,"value":100,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Saturation","name":"sldSaturation","msg":"-----------------------------------------------------------------------------\n-- Philips HUE Saturation slide 1 lamp\n-----------------------------------------------------------------------------\n--[[\n-----------------------------------------------------------------------------\nVersion 2.1b\nOriginal VD written by CHRISSXCROSS © 2015\nVD modified and upgraded by Sankotronic © 2016\n-----------------------------------------------------------------------------\n--]]\n-- PART OF CODE FOR USERS TO EDIT AND SETUP ---------------------------------\n-- enter HUE bulb ID to control. This ID number you can find from original\n-- application. When you go to Lights view it is then number in front of the\n-- bulb name\nlocal hueLightID = 1;\n-- enter name of the user that you added to the HUE bridge\nlocal hueUser = \"rg4e8w2nutaPWdUKHC2cRBho4HmNhE8kAXHU4oWB\" \n-- enter icon ID's for corresponding status of the lamp and brightness\nlocal iconOff         = 1058;\nlocal icon10          = 1059;\nlocal icon20          = 1060;\nlocal icon30          = 1061;\nlocal icon40          = 1062;\nlocal icon50          = 1063;\nlocal icon60          = 1064;\nlocal icon70          = 1065;\nlocal icon80          = 1066;\nlocal icon90          = 1067;\nlocal icon100         = 1068;\nlocal iconUnreachable = 141;\nlocal iconError       = 142;\n-- END OF CODE PART FOR USERS TO EDIT AND SETUP --------------------------\n\n-- BELLOW CODE NO NEED TO MODIFY BY USER ---------------------------------\n-- except if you know what you're doin' :-P\n\n-- get this virtual device ID\nvDeviceID = fibaro:getSelfId()\n-- get IP address and TCP port for PhilipsHUE bridge\nhueIP = fibaro:get(vDeviceID, \"IPAddress\")\nhuePort = fibaro:get(vDeviceID, \"TCPPort\")\n\n-- function to select the correct icon based on the slider value \nfunction getIcon(sValue) \n  if(sValue >= 90) then return icon100        -- 90%-99% 11_s_light100.png \n  elseif(sValue >= 80) then return icon90     -- 80%-89% 10_s_light90.png \n  elseif(sValue >= 70) then return icon80     -- 70%-79% 09_s_light80.png \n  elseif(sValue >= 60) then return icon70     -- 60%-69% 08_s_light70.png \n  elseif(sValue >= 50) then return icon60     -- 50%-59% 07_s_light60.png \n  elseif(sValue >= 40) then return icon50     -- 40%-49% 06_s_light50.png \n  elseif(sValue >= 30) then return icon40     -- 30%-39% 05_s_light40.png \n  elseif(sValue >= 20) then return icon30     -- 20%-29% 04_s_light30.png \n  elseif(sValue >= 10) then return icon20     -- 10%-19% 03_s_light20.png \n  elseif(sValue >= 1 ) then return icon10     -- 1%-9%   02_s_light10.png \n  else return iconOff end                     -- 0%      01_s_light0.png \nend \n\n-- define new value for Saturation\nvSat = math.floor(_sliderValue_ * 2.54) \n-- connect to the Hue bridge \nHue = Net.FHttp(hueIP,huePort)\n-- now set color for the light\nHue:PUT('/api/'..hueUser..'/lights/'..hueLightID..'/state', '{\"sat\":'.. vSat .. '}')\n-- change the icon based on the new slider value \nfibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", getIcon(tonumber(fibaro:getValue(vDeviceID, \"ui.sldBrightness.value\")))) \n","buttonIcon":1058,"value":80,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Refresh","name":"Button21","empty":false,"msg":"-----------------------------------------------------------------------------\n-- Philips HUE Refresh button\n-----------------------------------------------------------------------------\n--[[\n-----------------------------------------------------------------------------\nVersion 2.1b\nOriginal VD written by CHRISSXCROSS © 2015\nVD modified and upgraded by Sankotronic © 2016\n-----------------------------------------------------------------------------\n-- VERSION HISTORY ----------------------------------------------------------\n2.1 - corrected error handling when HUE bridge is not reachable\n2.0 - added On/Off button; two version avaliable: 2.0m with Main loop refresh\n      or 2.0b with button refresh for systems with more than 15 HUE lamps to\n      improve response and reduce network traffic; changing brightness, color\n      or Saturation sliders now immediately refreshes VD status; code improved\n      so users can easier setup necessary data\n1.5 - added sliders for color (hue) and Saturation, VD is now getting ID &\n      TCP port setting from VD general tab\n1.0 - Changing icons based on the brightness level, Changing icons based \n      on HUE lights state (unreachable/error); Error handling for HUE\n      resaponse data, status information in the bottom bar of the VD;\n      detailed comments in LUA code, main loop refresh code added\n-----------------------------------------------------------------------------\n--]]\n-- PART OF CODE FOR USERS TO EDIT AND SETUP ---------------------------------\n-- enter HUE bulb ID to control. This ID number you can find from original\n-- application. When you go to Lights view it is then number in front of the\n-- bulb name\nlocal hueLightID = 1;\n-- enter name of the user that you added to the HUE bridge\nlocal hueUser = \"rg4e8w2nutaPWdUKHC2cRBho4HmNhE8kAXHU4oWB\" \n-- enter icon ID's for corresponding status of the lamp and brightness\nlocal iconOff         = 1058;\nlocal icon10          = 1059;\nlocal icon20          = 1060;\nlocal icon30          = 1061;\nlocal icon40          = 1062;\nlocal icon50          = 1063;\nlocal icon60          = 1064;\nlocal icon70          = 1065;\nlocal icon80          = 1066;\nlocal icon90          = 1067;\nlocal icon100         = 1068;\nlocal iconUnreachable = 141;\nlocal iconError       = 142;\n-- DEBUGGING VARIABLES -----------------------------------------------------\n-- setup debugging, true is turned on, false turned off.\nlocal deBug        = true;  -- for showing events as they happen\n-- END OF CODE PART FOR USERS TO EDIT AND SETUP --------------------------\n\n-- BELLOW CODE NO NEED TO MODIFY BY USER ---------------------------------\n-- except if you know what you're doin' :-P\n\n-- get this virtual device ID\nvDeviceID = fibaro:getSelfId()\n-- get IP address and TCP port for PhilipsHUE bridge\nhueIP = fibaro:get(vDeviceID, \"IPAddress\")\nhuePort = fibaro:get(vDeviceID, \"TCPPort\")\n\nfunction logbug(color, message)\n  fibaro:debug(string.format('<%s style=\"color:%s;\">%s</%s>', \"span\", color, message, \"span\")); \nend\n\n-- function to select the correct icon based on the slider value \n-- NOTE: change the icon IDs if needed \nfunction getIcon(sValue) \n  if(sValue >= 90) then return icon100        -- 90%-99% 11_s_light100.png \n  elseif(sValue >= 80) then return icon90     -- 80%-89% 10_s_light90.png \n  elseif(sValue >= 70) then return icon80     -- 70%-79% 09_s_light80.png \n  elseif(sValue >= 60) then return icon70     -- 60%-69% 08_s_light70.png \n  elseif(sValue >= 50) then return icon60     -- 50%-59% 07_s_light60.png \n  elseif(sValue >= 40) then return icon50     -- 40%-49% 06_s_light50.png \n  elseif(sValue >= 30) then return icon40     -- 30%-39% 05_s_light40.png \n  elseif(sValue >= 20) then return icon30     -- 20%-29% 04_s_light30.png \n  elseif(sValue >= 10) then return icon20     -- 10%-19% 03_s_light20.png \n  elseif(sValue >= 1 ) then return icon10     -- 1%-9%   02_s_light10.png \n  else return iconOff end                     -- 0%      01_s_light0.png \nend \n  \n-- connect to the Hue bridge \nHue = Net.FHttp(hueIP,huePort) \n-- HTTP GET to get all the info from the light \nresponse, status, errorCode = Hue:GET('/api/'..hueUser..'/lights/'..hueLightID);\n-- continue if HTTP status code is 200 \nif (tonumber(status) == 200) then \n  jsonTable = json.decode(response) \n  -- check if error table exists \n  if (jsonTable[1] ~= nil) then \n    -- show error information \n    errorType = jsonTable[1].error.type \n    errorDescription = jsonTable[1].error.description \n    if deBug then logbug(\"red\", \"Error type = \"..errorType) end;\n    if deBug then logbug(\"red\", \"Error description = \"..errorDescription) end;\n    if (errorType == 1) then fibaro:log(\"Hue: Unauthorized user\") \n    elseif (errorType == 3) then fibaro:log(\"Hue: Incorrect light ID\")  \n    end \n    -- set slider value to 0 \n    fibaro:call(vDeviceID, \"setProperty\", \"ui.sldBrightness.value\", 0) \n    -- change the icon to iconError \n    fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", iconError)    \n  else \n    -- get the on state \n    hueOn = jsonTable.state.on \n    if deBug then logbug(\"lightgreen\", \"hueOn = \" .. tostring(hueOn)) end; \n    -- get the brightness value (0-254) \n    hueBrightness = tonumber(jsonTable.state.bri) \n    if deBug then logbug(\"yellow\", \"hueBrightness = \"..hueBrightness) end;\n    -- get the color value (0-65535) \n    hueColor = tonumber(jsonTable.state.hue)\n    -- get the saturation value (0-254) \n    hueSaturation = tonumber(jsonTable.state.sat)\n    -- get the reachable state \n    hueReachable = jsonTable.state.reachable \n    if deBug then logbug(\"yellow\", \"hueReachable = \" .. tostring(hueReachable)) end; \n    if (hueReachable == true) then \n      if (hueOn == false) then\n        -- if light is off put slider on 0 because iPad application does not show picture of lamp.\n        briSlider = 0; \n      else \n        -- devide the hueBrightness value by 2.54 and round it UPWARDS \n        -- to get the hueSlider value (0-100) \n        briSlider = math.ceil(hueBrightness / 2.54); \n      end\n      hueSlider = math.ceil(hueColor / 655.35);\n      satSlider = math.ceil(hueSaturation / 2.54);\n      -- show brightness and state info on the bottom bar of the Virtual Device \n      if deBug then logbug(\"yellow\", \"hueSlider = \"..briSlider) end; \n      fibaro:log(\"brightness: \"..hueBrightness..\" | on: \"..tostring(hueOn)); \n      -- set the actual slider value \n      fibaro:call(vDeviceID, \"setProperty\", \"ui.sldBrightness.value\", briSlider) \n      fibaro:call(vDeviceID, \"setProperty\", \"ui.sldHue.value\", hueSlider) \n      fibaro:call(vDeviceID, \"setProperty\", \"ui.sldSaturation.value\", satSlider) \n      -- change the icon of the Virtual Device based on the hueSlider value \n      fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", getIcon(briSlider))\n    else \n      fibaro:log(\"Hue: Light not reachable\"); \n      -- set slider value to 0 \n      fibaro:call(vDeviceID, \"setProperty\", \"ui.sldBrightness.value\", 0) \n      -- change the icon to unreachable \n      fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", iconUnreachable)    \n    end \n  end\nelse\n  fibaro:log(\"Hue: Bridge not reachable\");\n  fibaro:call(vDeviceID, \"setProperty\", \"currentIcon\", iconError);\nend\n","buttonIcon":400,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}